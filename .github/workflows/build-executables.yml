name: Build Cross-Platform Executables

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag"
        required: false
        default: "latest"
      platform:
        description: "Platform to build (leave empty for all)"
        required: false
        default: ""
        type: choice
        options:
          - ""
          - "ubuntu-latest"
          - "windows-latest"
          - "macos-latest"
          - "macos-14"

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
            artifact_name: pse-scraper-linux-x64
          - os: windows-latest
            platform: windows-x64
            artifact_name: pse-scraper-windows-x64.exe
          - os: macos-latest
            platform: macos-x64
            artifact_name: pse-scraper-macos-x64
          - os: macos-14 # ARM64 runner
            platform: macos-arm64
            artifact_name: pse-scraper-macos-arm64

    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check if build should run
        id: should-run
        run: |
          if [[ "${{ github.event.inputs.platform }}" == "" || "${{ github.event.inputs.platform }}" == "${{ matrix.os }}" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        if: steps.should-run.outputs.run == 'true'
        uses: actions/checkout@v4

      - name: Set up Python
        if: steps.should-run.outputs.run == 'true'
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        if: steps.should-run.outputs.run == 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        if: steps.should-run.outputs.run == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.should-run.outputs.run == 'true'
        run: poetry install --with dev --no-interaction

      - name: Build executable
        if: steps.should-run.outputs.run == 'true'
        run: |
          poetry run python build_executable.py --clean

      - name: Verify executable exists
        if: steps.should-run.outputs.run == 'true'
        run: |
          ls -la releases/
          if [ ! -f "releases/${{ matrix.artifact_name }}" ]; then
            echo "Error: Executable not found at releases/${{ matrix.artifact_name }}"
            exit 1
          fi

      - name: Test executable
        if: steps.should-run.outputs.run == 'true'
        run: |
          chmod +x releases/${{ matrix.artifact_name }} || true
          ./releases/${{ matrix.artifact_name }} --version

      - name: Upload artifact
        if: steps.should-run.outputs.run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: releases/${{ matrix.artifact_name }}
          retention-days: 30

      - name: Create Release
        if: steps.should-run.outputs.run == 'true' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: releases/${{ matrix.artifact_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-checksums:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create checksums
        run: |
          cd artifacts
          echo "Files in artifacts directory:"
          find . -type f -name "pse-scraper-*"
          echo "Generating checksums..."
          find . -type f -name "pse-scraper-*" -exec sha256sum {} \; > ../checksums.txt
          cd ..
          echo "Generated checksums:"
          cat checksums.txt
          echo "## SHA256 Checksums" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          cat checksums.txt >> release_notes.md
          echo "\`\`\`" >> release_notes.md

      - name: Update Release with checksums
        uses: softprops/action-gh-release@v1
        with:
          files: |
            checksums.txt
          body_path: release_notes.md
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
