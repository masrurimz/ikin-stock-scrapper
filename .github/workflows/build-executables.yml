name: 🚀 Build & Upload Executables

on:
  release:
    types: [created, published]
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag to upload executables to (e.g., v2.1.0)"
        required: true
        type: string
      platform:
        description: "Platform to build (leave empty for all)"
        required: false
        default: ""
        type: choice
        options:
          - ""
          - "ubuntu-latest"
          - "windows-latest"
          - "macos-13"
          - "macos-latest"

permissions:
  contents: write
  packages: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.release_tag || github.event.release.tag_name || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: 🔨 Build ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
            artifact_name: pse-scraper-linux-x64
            package_name: pse-scraper-linux-x64.tar.gz
          - os: windows-latest
            platform: windows-x64
            artifact_name: pse-scraper-windows-x64.exe
            package_name: pse-scraper-windows-x64.zip
          - os: macos-13 # Intel x64 runner
            platform: macos-x64
            artifact_name: pse-scraper-macos-x64
            package_name: pse-scraper-macos-x64.tar.gz
          - os: macos-latest # ARM64 runner (now default)
            platform: macos-arm64
            artifact_name: pse-scraper-macos-arm64
            package_name: pse-scraper-macos-arm64.tar.gz

    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}

    steps:
      - name: 🔍 Check if build should run
        id: should-run
        run: |
          if [[ "${{ github.event.inputs.platform }}" == "" || "${{ github.event.inputs.platform }}" == "${{ matrix.os }}" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
          fi

      - name: 📥 Checkout code
        if: steps.should-run.outputs.run == 'true'
        uses: actions/checkout@v4

      - name: 🔍 Verify release exists
        if: steps.should-run.outputs.run == 'true'
        run: |
          RELEASE_TAG="${{ github.event.inputs.release_tag || github.event.release.tag_name }}"
          echo "Verifying release exists for tag: $RELEASE_TAG"
          
          if ! gh release view "$RELEASE_TAG" &>/dev/null; then
            echo "❌ Release $RELEASE_TAG not found!"
            echo "Available releases:"
            gh release list --limit 5
            exit 1
          fi
          
          echo "✅ Release $RELEASE_TAG found"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python 3.11
        if: steps.should-run.outputs.run == 'true'
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 🪟 Set UTF-8 encoding (Windows)
        if: steps.should-run.outputs.run == 'true' && runner.os == 'Windows'
        run: |
          echo "PYTHONIOENCODING=utf-8" >> $env:GITHUB_ENV
          echo "PYTHONUTF8=1" >> $env:GITHUB_ENV
          chcp 65001
        shell: pwsh

      - name: 📦 Install Poetry
        if: steps.should-run.outputs.run == 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 💾 Cache Poetry dependencies
        if: steps.should-run.outputs.run == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: 🔧 Install dependencies
        if: steps.should-run.outputs.run == 'true'
        run: poetry install --with dev --no-interaction

      - name: 🔨 Build executable
        if: steps.should-run.outputs.run == 'true'
        run: |
          echo "Building executable for ${{ matrix.platform }}..."
          poetry run python build_executable.py --clean

      - name: ✅ Verify executable exists
        if: steps.should-run.outputs.run == 'true'
        run: |
          ls -la releases/
          if [ ! -f "releases/${{ matrix.artifact_name }}" ]; then
            echo "❌ Error: Executable not found at releases/${{ matrix.artifact_name }}"
            exit 1
          fi
          echo "✅ Executable found: releases/${{ matrix.artifact_name }}"

      - name: 🧪 Test executable (Unix)
        if: steps.should-run.outputs.run == 'true' && runner.os != 'Windows'
        run: |
          chmod +x releases/${{ matrix.artifact_name }}
          echo "Testing executable version..."
          ./releases/${{ matrix.artifact_name }} --version
          echo "Testing executable help..."
          ./releases/${{ matrix.artifact_name }} --help

      - name: 🧪 Test executable (Windows)
        if: steps.should-run.outputs.run == 'true' && runner.os == 'Windows'
        run: |
          $env:PYTHONIOENCODING = "utf-8"
          $env:PYTHONUTF8 = "1"
          chcp 65001 > $null
          Write-Host "Testing executable version..."
          & ".\releases\${{ matrix.artifact_name }}" --version
          Write-Host "Testing executable help..."
          & ".\releases\${{ matrix.artifact_name }}" --help
        shell: pwsh

      - name: 📦 Create release package
        if: steps.should-run.outputs.run == 'true'
        run: |
          cd releases
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "Creating ZIP package for Windows..."
            7z a "${{ matrix.package_name }}" "${{ matrix.artifact_name }}"
          else
            echo "Creating TAR.GZ package for Unix..."
            tar -czf "${{ matrix.package_name }}" "${{ matrix.artifact_name }}"
          fi
          echo "📊 Package info:"
          ls -lh "${{ matrix.package_name }}"
          cd ..

      - name: 📤 Upload build artifact
        if: steps.should-run.outputs.run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-package
          path: releases/${{ matrix.package_name }}
          retention-days: 30

      - name: 🚀 Upload to GitHub Release
        if: steps.should-run.outputs.run == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: releases/${{ matrix.package_name }}
          tag_name: ${{ github.event.inputs.release_tag || github.event.release.tag_name }}
          append_body: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-checksums:
    name: 🔐 Generate Checksums
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'

    steps:
      - name: 📥 Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 🔐 Generate SHA256 checksums
        run: |
          echo "📂 Files in artifacts directory:"
          find artifacts -type f -name "*.tar.gz" -o -name "*.zip"
          
          echo ""
          echo "🔐 Generating SHA256 checksums..."
          cd artifacts
          
          # Create checksums for all platform packages
          find . -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec sha256sum {} \; | sed 's|./[^/]*/||' > ../checksums.txt
          
          cd ..
          echo ""
          echo "✅ Generated checksums:"
          cat checksums.txt
          
          echo ""
          echo "📝 Creating release notes section..."
          echo "## 🔐 SHA256 Checksums" > checksum_notes.md
          echo "" >> checksum_notes.md
          echo "Verify your download integrity using these checksums:" >> checksum_notes.md
          echo "" >> checksum_notes.md
          echo "\`\`\`" >> checksum_notes.md
          cat checksums.txt >> checksum_notes.md
          echo "\`\`\`" >> checksum_notes.md
          echo "" >> checksum_notes.md
          echo "### Verification Instructions" >> checksum_notes.md
          echo "**Linux/macOS:** \`sha256sum -c checksums.txt\`" >> checksum_notes.md
          echo "**Windows:** \`certUtil -hashfile <filename> SHA256\`" >> checksum_notes.md

      - name: 🚀 Upload checksums to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            checksums.txt
          body_path: checksum_notes.md
          append_body: true
          tag_name: ${{ github.event.inputs.release_tag || github.event.release.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
