name: 🔍 Continuous Integration

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🧹 Code Quality (Python 3.10 only)
  quality:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 💾 Cache dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.10-${{ hashFiles('**/poetry.lock') }}

      - name: 📚 Install dependencies
        run: |
          poetry install --no-interaction

      - name: 🔍 Lint with flake8
        run: |
          poetry run flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          poetry run flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: 🔧 Type check with mypy
        run: poetry run mypy src/pse_scraper/

  # 🧪 Tests (Multiple Python versions in parallel)
  test:
    name: 🧪 Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 💾 Cache dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: 📚 Install dependencies
        run: poetry install --no-interaction

      - name: 🧪 Run tests
        run: |
          poetry run pytest --cov=pse_scraper --cov-report=xml --cov-report=term-missing

      - name: 📊 Upload coverage (Python 3.10 only)
        if: matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # 📦 Build Package
  build:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 🔨 Build package
        run: poetry build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  # ✅ CI Success
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: always()
    steps:
      - name: ✅ Mark CI as successful
        if: needs.quality.result == 'success' && needs.test.result == 'success' && (needs.build.result == 'success' || needs.build.result == 'skipped')
        run: echo "🎉 All CI checks passed!"
        
      - name: ❌ Mark CI as failed
        if: needs.quality.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ CI checks failed!"
          exit 1