name: Test Build Workflow

on:
  workflow_dispatch:
    inputs:
      platform:
        description: "Platform to test (leave empty for all)"
        required: false
        default: ""
        type: choice
        options:
          - ""
          - "ubuntu-latest"
          - "windows-latest"
          - "macos-latest"
          - "macos-14"

jobs:
  test-build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
            artifact_name: pse-scraper-linux-x64
          - os: windows-latest
            platform: windows-x64
            artifact_name: pse-scraper-windows-x64.exe
          - os: macos-latest
            platform: macos-x64
            artifact_name: pse-scraper-macos-x64
          - os: macos-14 # ARM64 runner
            platform: macos-arm64
            artifact_name: pse-scraper-macos-arm64

    runs-on: ${{ matrix.os }}

    # Skip builds if a specific platform is requested and this isn't it
    if: ${{ github.event.inputs.platform == '' || matrix.os == github.event.inputs.platform }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install
          poetry run pip install pyinstaller

      - name: Build executable
        run: |
          poetry run python build_executable.py --clean

      - name: Verify executable exists (Unix)
        if: runner.os != 'Windows'
        run: |
          ls -la releases/
          if [ ! -f "releases/${{ matrix.artifact_name }}" ]; then
            echo "Error: Executable not found at releases/${{ matrix.artifact_name }}"
            exit 1
          fi

      - name: Verify executable exists (Windows)
        if: runner.os == 'Windows'
        run: |
          dir releases\
          if (!(Test-Path "releases\${{ matrix.artifact_name }}")) {
            Write-Error "Error: Executable not found at releases\${{ matrix.artifact_name }}"
            exit 1
          }
        shell: pwsh

      - name: Test executable (Unix)
        if: runner.os != 'Windows'
        run: |
          chmod +x releases/${{ matrix.artifact_name }}
          ./releases/${{ matrix.artifact_name }} --version
          ./releases/${{ matrix.artifact_name }} --help

      - name: Test executable (Windows)
        if: runner.os == 'Windows'
        run: |
          .\releases\${{ matrix.artifact_name }} --version
          .\releases\${{ matrix.artifact_name }} --help

      - name: Get file info
        run: |
          echo "File size and info:"
          ls -lh releases/ || dir releases\

      - name: Upload test artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-${{ matrix.artifact_name }}
          path: releases/${{ matrix.artifact_name }}
          retention-days: 7
